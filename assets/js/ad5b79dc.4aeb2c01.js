"use strict";(self.webpackChunkmy_demo=self.webpackChunkmy_demo||[]).push([[2838],{3940:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"RENESAS RZ-G2L/helloworld_ttl","title":"2.2 Prompting a \\"Hello World\\" Program on the RZG2L Board Using Yocto Project","description":"Overview","source":"@site/docs/RENESAS RZ-G2L/helloworld_ttl.md","sourceDirName":"RENESAS RZ-G2L","slug":"/RENESAS RZ-G2L/helloworld_ttl","permalink":"/jayden/docs/RENESAS RZ-G2L/helloworld_ttl","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/RENESAS RZ-G2L/helloworld_ttl.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"2.1 Setup of Yocto Build Environment for Renesas RZ-G2L","permalink":"/jayden/docs/RENESAS RZ-G2L/yocto_build"},"next":{"title":"2.3 Yocto Build Project Notes","permalink":"/jayden/docs/RENESAS RZ-G2L/yocto_important"}}');var r=i(4848),l=i(8453);const o={sidebar_position:2},t='2.2 Prompting a "Hello World" Program on the RZG2L Board Using Yocto Project',d={},a=[{value:"Overview",id:"overview",level:2},{value:"Step-by-Step Instructions",id:"step-by-step-instructions",level:2},{value:"1. Initialize the Yocto Project Build Environment",id:"1-initialize-the-yocto-project-build-environment",level:3},{value:"2. Create a Custom Layer",id:"2-create-a-custom-layer",level:3},{value:"3. Add the Custom Layer to the Build Configuration",id:"3-add-the-custom-layer-to-the-build-configuration",level:3},{value:"4. Modify Local Configuration to Include the Program",id:"4-modify-local-configuration-to-include-the-program",level:3},{value:"5. Write the Recipe for the Hello World Program",id:"5-write-the-recipe-for-the-hello-world-program",level:3},{value:"6. Add the Source Code",id:"6-add-the-source-code",level:3},{value:"7. Build the Image",id:"7-build-the-image",level:3},{value:"8. Verify Build Success",id:"8-verify-build-success",level:3},{value:"9. Deploy the Image to an SD Card",id:"9-deploy-the-image-to-an-sd-card",level:3},{value:"10. Setup and Boot the RZG2L Board",id:"10-setup-and-boot-the-rzg2l-board",level:3},{value:"11. Monitor the Serial Output",id:"11-monitor-the-serial-output",level:3}];function c(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"22-prompting-a-hello-world-program-on-the-rzg2l-board-using-yocto-project",children:'2.2 Prompting a "Hello World" Program on the RZG2L Board Using Yocto Project'})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:'This tutorial demonstrates building and running a "Hello World" program on the RZG2L board by creating a custom Yocto Project layer and integrating a simple C program. The process involves creating a new layer, writing a recipe, adding a C source file, building the image, and deploying it to the board.'}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"step-by-step-instructions",children:"Step-by-Step Instructions"}),"\n",(0,r.jsx)(n.h3,{id:"1-initialize-the-yocto-project-build-environment",children:"1. Initialize the Yocto Project Build Environment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"source poky/oe-init-build-env build\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Initialise code",src:i(6532).A+"",width:"622",height:"294"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","This initializes the Yocto Project build environment, setting up necessary environment variables and directories (",(0,r.jsx)(n.code,{children:"build/"}),"), making it ready for further commands."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"2-create-a-custom-layer",children:"2. Create a Custom Layer"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bitbake-layers create-layer meta-jden\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Create Layer",src:i(1807).A+"",width:"537",height:"142"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","A custom layer (",(0,r.jsx)(n.code,{children:"meta-jden"}),") is created to contain your custom recipes. Layers in Yocto provide modularity, allowing you to organize and add features to the build."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"3-add-the-custom-layer-to-the-build-configuration",children:"3. Add the Custom Layer to the Build Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open ",(0,r.jsx)(n.code,{children:"bblayers.conf"})," and add the following line:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"${TOPDIR}/../meta-jden \\\n"})}),"\n",(0,r.jsx)(n.img,{alt:"BBlayers conf",src:i(8006).A+"",width:"625",height:"398"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","Adding the layer to ",(0,r.jsx)(n.code,{children:"bblayers.conf"})," ensures the build system recognizes and includes this layer during the build process."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"4-modify-local-configuration-to-include-the-program",children:"4. Modify Local Configuration to Include the Program"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open ",(0,r.jsx)(n.code,{children:"local.conf"})," and append the following line:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'IMAGE_INSTALL_append = " helloworld "\n'})}),"\n",(0,r.jsx)(n.img,{alt:"local conf",src:i(7977).A+"",width:"665",height:"394"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","This directive ensures the ",(0,r.jsx)(n.code,{children:"helloworld"})," program will be included in the final image. The ",(0,r.jsx)(n.code,{children:"IMAGE_INSTALL_append"})," adds the program to the list of packages to be installed in the image."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"5-write-the-recipe-for-the-hello-world-program",children:"5. Write the Recipe for the Hello World Program"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a folder ",(0,r.jsx)(n.code,{children:"helloworld"})," inside ",(0,r.jsx)(n.code,{children:"recipes-examples"})," and add a file ",(0,r.jsx)(n.code,{children:"helloworld.bb"})," with the following content:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-plaintext",children:'SUMMARY = "SIMPLE HELLO WORLD PROGRAM"\n\nLICENSE = "MIT"\nLIC_FILES_CHKSUM = "file://${COREBASE}/meta/COPYING.MIT;md5=3da9cfbcb788c80a0384361b4de20420"\n\nSRC_URI = "file://helloworld.c"\n\nS = "${WORKDIR}"\n\ndo_compile(){\n    ${CC} ${CFLAGS} ${LDFLAGS} ${WORKDIR}/helloworld.c -o helloworld\n}\n\ndo_install(){\n    install -d ${D}${bindir}\n    install -m 0755 helloworld ${D}${bindir}\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"helloworld bb file",src:i(3776).A+"",width:"1288",height:"691"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SUMMARY"})," provides a brief description of the recipe."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"LICENSE"})," declares the licensing terms."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SRC_URI"})," specifies the source code location (in this case, ",(0,r.jsx)(n.code,{children:"helloworld.c"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"do_compile"})," is a build task using the provided toolchain to compile ",(0,r.jsx)(n.code,{children:"helloworld.c"})," into an executable."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"do_install"})," copies the compiled binary to the appropriate system directory (",(0,r.jsx)(n.code,{children:"${bindir}"}),"), making it accessible in the target image."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"6-add-the-source-code",children:"6. Add the Source Code"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Inside the ",(0,r.jsx)(n.code,{children:"helloworld"})," folder, create a ",(0,r.jsx)(n.code,{children:"files"})," directory. Add the following ",(0,r.jsx)(n.code,{children:"helloworld.c"})," file:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n\nvoid main(){\n    printf("Hello Worlds!!!");\n    return 0;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"helloworld c file",src:i(1339).A+"",width:"908",height:"710"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n",'This simple C program prints "Hello Worlds!!!" to the standard output.']}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"7-build-the-image",children:"7. Build the Image"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"MACHINE=smarc-rzg2l bitbake core-image-qt\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"build file",src:i(9794).A+"",width:"1072",height:"834"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"MACHINE=smarc-rzg2l"})," specifies the target machine configuration."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"bitbake"})," is the build tool to create the image, which will include the ",(0,r.jsx)(n.code,{children:"helloworld"})," program."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"core-image-qt"})," is the image recipe used as the base."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"8-verify-build-success",children:"8. Verify Build Success"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Check for the build output:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"/workspaces/rzg/yocto/build/tmp/work/aarch64-poky-linux/helloworld\n"})}),"\n",(0,r.jsx)(n.img,{alt:"build check",src:i(8949).A+"",width:"293",height:"527"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","If the folder exists and contains the compiled binary, the build process was successful."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"9-deploy-the-image-to-an-sd-card",children:"9. Deploy the Image to an SD Card"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the following command:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"sudo bmaptool copy <wic image>.wic.gz /dev/sda\n"})}),"\n",(0,r.jsx)(n.img,{alt:"deploy image",src:i(7324).A+"",width:"1533",height:"834"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Explanation:"}),(0,r.jsx)(n.br,{}),"\n","This writes the generated image to an SD card (",(0,r.jsx)(n.code,{children:"/dev/sda"}),"), which will be used to boot the RZG2L board."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"10-setup-and-boot-the-rzg2l-board",children:"10. Setup and Boot the RZG2L Board"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Insert the SD card, connect the board, and power it on."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"11-monitor-the-serial-output",children:"11. Monitor the Serial Output"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Open the serial monitor in VS Code:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Set the baud rate to ",(0,r.jsx)(n.code,{children:"115200"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Start monitoring.\n",(0,r.jsx)(n.img,{alt:"serial monitor",src:i(4814).A+"",width:"1628",height:"265"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:'By following these steps, you successfully build and execute a "Hello World" program on the RZG2L board, demonstrating a basic workflow in the Yocto Project for embedded systems development.'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{})})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},6532:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.1-b4670e0e01a7fafd7f3770ae70fd42f4.png"},4814:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.10-486a498a8cb363ea53ef53796afa249e.png"},1807:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.2-68cd0c40b989b301d7af64b47a78ce27.png"},8006:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.3-0b5f161a080dbecd46b84e66eb112316.png"},7977:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.4-6049ab47645f59d8108d0b9646beba3a.png"},3776:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.5-026498ed743346c14a632af1d8d7ac80.png"},1339:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.6-1b11e5b4fc5590f95203664e950a2bf7.png"},9794:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.7-8a4b675c5ad415b4eb18e16d36552b91.png"},8949:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.8-f2f682b76f09a855c4a2a03384e05a42.png"},7324:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/renesas_2.9-9e371706be799aba1afff5190b291810.png"},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>t});var s=i(6540);const r={},l=s.createContext(r);function o(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);